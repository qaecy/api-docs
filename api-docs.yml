openapi: 3.0.0
info:
  title: Cue APIs
  description: Handles all ingress and egress of data to/from the QAECY Cue pipelines + calls to the agent.
  version: "1.0"
  contact: {}
tags: 
  - name: BLOB Writer
    description: Handles ingress of raw documents
  - name: Assistant
    description: Handles interactions with the Cue assistant
  - name: Knowledge
    description: Handles writing and deleting of knowledge to the databases
  - name: Triplestore
    description: Exposes the project triplestore endpoints for querying, SHACL checks etc.
  - name: Data views
    description: Provides specific views on the data within a Cue project
servers:
  - url: http://localhost:8093
    description: Local dev
  - url: https://accessors-api-gateway-ueyeemwf2a-oa.a.run.app
    description: Production
security:
  - QAECYAuth: []
paths:
  /blob/upload:
    post:
      operationId: BlobUpload
      summary: Upload a file for processing by the pipelines
      tags:
        - BLOB Writer
      parameters:
        - name: x-project-id
          in: header
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FileUploadDto"
      responses:
        '201':
          description: File successfully uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "report.pdf was successfully uploaded to project ffd5c559-1821-4e8c-a956-08f61f352e3b!"
                uuid: 6ad3e777-87e8-56e1-8f37-d7fcf07e3f50
  /assistant/wake-up:
    get:
      summary: Trigger the service to wake up.
      tags:
        - Assistant
      operationId: AssistantWakeUp
      responses:
        "200":
          description: ""
  /assistant/warm-up:
    post:
      summary: Preload the knowledge base for the requested project.
      tags:
        - Assistant
      parameters:
        - name: x-project-id
          in: header
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId:
                  type: string
                  description: The project ID (will soon be removed and read from headers)
              required:
                - projectId
      operationId: AssistantWarmUp
      responses:
        "200":
          description: ""
  /assistant/qa-text:
    post:
      operationId: AssistantQAText
      summary: Performs QA against the knowledge base.
      tags:
        - Assistant
      parameters:
        - name: x-project-id
          in: header
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ChatDto"
      responses:
        '200':
          description: "The response is a streamed json file, including the sources."
  /assistant/graphdb/query:
    post:
      operationId: AssistantGraphDBQuery
      summary: Performs a SPARQL query to the graph database.
      tags:
        - Assistant
      parameters:
        - name: x-project-id
          in: header
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryAssDto"
      responses:
        '200':
          description: ""
  /assistant/vectordb/search:
    post:
      operationId: AssistantVectorDBSearch
      summary: Performs search against the vector database.
      tags:
        - Assistant
      parameters:
        - name: x-project-id
          in: header
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VectorSearchDto"
      responses:
        '200':
          description: ""
  /knowledge/wake-up:
    get:
      summary: Trigger the service to wake up.
      tags:
        - Knowledge
      operationId: KnowledgeWakeUp
      responses:
        "200":
          description: ""
  /knowledge/remove-documents:
    post:
      summary: Remove documents and/or extracted information.
      tags:
        - Knowledge
      operationId: KnowledgeRemoveDocuments
      parameters:
        - name: x-project-id
          in: header
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveDocumentsDto"
      responses:
        "200":
          description: ""
  /triplestore/query:
    post:
      operationId: TriplestoreQuery
      summary: Performs a SPARQL query to the graph database.
      tags:
        - Triplestore
      parameters:
        - name: x-project-id
          in: header
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/QueryDto"
      responses:
        '200':
          $ref: "#/components/responses/SPARQL"
  /data-views/resource/{resourceID}:
    get:
      experimental: true
      summary: Exposes a view of the particular resource (file location/content, fragment, entity). The default response mime type is JSON-LD but the endpoint supports content negotiation by setting the Accept header.
      description: |
        **Experimental:** This API is subject to change or removal 
      tags:
        - Data views
      operationId: DataViewsResource
      parameters:
        - name: resourceID
          in: path
          description: UUID of the resource
          required: true
          schema:
            type: string
        - name: x-project-id
          in: header
          description: Project ID
          required: true
          schema:
            type: string
        - name: includeSchema
          in: query
          description: Include schema in the response
          required: false
          default: false
          schema:
            type: boolean
      responses:
        '200':
          $ref: "#/components/responses/RDF"
  /data-views/derived/{sourceID}:
    get:
      experimental: true
      summary: Exposes a view of all facts that are derived from the input document. Id is either the UUID of the file location or content node. The default response mime type is JSON-LD but the endpoint supports content negotiation by setting the Accept header.
      description: |
        **Experimental:** This API is subject to change or removal 
      tags:
        - Data views
      operationId: DataViewsDerived
      parameters:
        - name: sourceID
          in: path
          description: Source file identified by its location content UUID
          required: true
          schema:
            type: string
        - name: x-project-id
          in: header
          description: Project ID
          required: true
          schema:
            type: string
        - name: includeSchema
          in: query
          description: Include schema in the response
          required: false
          default: false
          schema:
            type: boolean
      responses:
        '200':
          $ref: "#/components/responses/RDF"
components:
  schemas:
    FileUploadDto:
      type: object
      properties:
        file:
          type: string
          format: binary
          description: File to upload
        filename:
          type: string
          description: Full file path as represented in host system
        customMetadata:
          type: string
          description: Any relevant custom metadata from the host system formatted as stringified JSON
      required:
        - file
        - filename
    VectorSearchDto:
      type: object
      properties:
        question:
          type: string
          description: Search query
        projectId:
          type: string
          description: The project id (will soon be removed and read from headers)
        target:
          type: string
          description: The target collection, out of the currently supported ones (page_summaries, document_summaries)
          default: page_summaries
        limit:
          type: number
          description: Number of results included
          default: 20
        queryType:
          type: string
          description: Perform vector-only (vector) or hybrid (hybrid) search which includes fts
          default: vector
        identifiers:
          type: array
          items:
            type: string
          description: The identifiers of the documents that the search should be constrained to
      required:
        - question
        - projectId
    ChatDto:
      type: object
      properties:
        prompt:
          type: string
          description: Chat prompt
        projectId:
          type: string
          description: The project id (will soon be removed and read from headers)
        target:
          type: string
          description: The target vector collection, out of the currently supported ones (page_summaries, document_summaries)
          default: page_summaries
        limit:
          type: number
          description: Number of the vector results included in the retrieval
          default: 20
        queryType:
          type: string
          description: Perform vector-only (vector) or hybrid (hybrid) search which includes fts
          default: vector
        identifiers:
          type: array
          items:
            type: string
          description: The identifiers of the documents that the search should be constrained to
      required:
        - prompt
        - projectId
    QueryDto:
      type: object
      properties:
        query:
          type: string
          description: The query
          default: ASK WHERE { ?s ?p ?o }
          multiLine: true
      required:
        - query
    QueryAssDto:
      type: object
      properties:
        query:
          type: string
          description: The query
          default: ASK WHERE { ?s ?p ?o }
          multiLine: true
        projectId:
          type: string
          description: The project id (will soon be removed and read from headers)
        identifiers:
          type: array
          items:
            type: string
          description: The identifiers of the documents that the query should be constrained to
      required:
        - query
        - projectId
    RemoveDocumentsDto:
      type: object
      properties:
        projectId:
          type: string
          description: The project id (will soon be removed and read from headers)
        fileNames:
          type: array
          items:
            type: string
          description: Array containing the list of filenames to be deleted, prefixed with their full path
          default: []
        blobNames:
          type: array
          items:
            type: string
          description: Array containing the list of blobs to be deleted, prefixed with the projectId
          default: []
        removeGraphs:
          type: boolean
          description: Remove all the associated (also derived) information from the knowledge graph
          default: true
        removeVectors:
          type: boolean
          description: Remove all the associated vector embeddings from the vector store
          default: true
        removeRaw:
          type: boolean
          description: Remove the raw blob files
          default: true
        removeProcessed:
          type: boolean
          description: Remove all the processed / derivative files that where produced from the files
          default: true
        deleteAll:
          type: boolean
          description: Bypass other settings and delete all raw and processed files as well as knowledge graph and vector store data
          default: false
      required:
        - projectId
        - fileNames
  responses:
    SPARQL:
      description: SPARQL query results
      content:
        application/sparql-results+json:
          schema:
            type: object
            properties:
              head:
                type: object
                properties:
                  vars:
                    type: array
                    items:
                      type: string
              results:
                type: object
                properties:
                  bindings:
                    type: array
                    items:
                      type: object
                      additionalProperties:
                        type: object
                        properties:
                          type:
                            type: string
                            enum: [uri, literal, bnode]
                          value:
                            type: string
          example:
            head:
              vars: ["s", "p", "o"]
            results:
              bindings:
                - s: {type: "uri", value: "https://cue.qaecy.com/r/3715f1eb-bfa6-44b7-99ee-932f25f65d68"}
                  p: {type: "uri", value: "https://dev.qaecy.com/ont#value"}
                  o: {type: "literal", value: "John Doe"}
        application/ld+json:
          schema:
            type: array
            items:
              type: object
              properties:
                "@id":
                  type: string
                "@type":
                  type: string
                "@context":
                  type: object
          example:
            - "@context":
                "@base": "https://cue.qaecy.com/r/"
                "qcy": "https://dev.qaecy.com/ont#"
                "qcy-e": "https://dev.qaecy.com/enum#"
              "@id": "3715f1eb-bfa6-44b7-99ee-932f25f65d68"
              "@type": "qcy:EntityMention"
              "qcy:value": "John Doe"
              "qcy:hasEntityCategory":
                "@id": "qcy-e:Person"
    RDF:
      description: RDF graph content
      content:
        application/ld+json:
          schema:
            type: array
            items:
              type: object
              properties:
                "@id":
                  type: string
                "@type":
                  type: string
                "@context":
                  type: object
          example:
            - "@context":
                "@base": "https://cue.qaecy.com/r/"
                "qcy": "https://dev.qaecy.com/ont#"
                "qcy-e": "https://dev.qaecy.com/enum#"
              "@id": "3715f1eb-bfa6-44b7-99ee-932f25f65d68"
              "@type": "qcy:EntityMention"
              "qcy:value": "John Doe"
              "qcy:hasEntityCategory":
                "@id": "qcy-e:Person"
        text/turtle:
          schema:
            type: string
          example:
            "@base <https://cue.qaecy.com/r/> .\n
            @prefix qcy: <https://dev.qaecy.com/ont#> .\n
            @prefix qcy-e: <https://dev.qaecy.com/enum#> .\n\n
            <3715f1eb-bfa6-44b7-99ee-932f25f65d68> a qcy:EntityMention ;\n
            \tqcy:value \"John Doe\" ;\n
            \tqcy:hasEntityCategory qcy-e:Person ."
        application/n-triples:
          schema:
            type: string
          example:
            "<https://cue.qaecy.com/r/3715f1eb-bfa6-44b7-99ee-932f25f65d68> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <https://dev.qaecy.com/ont#EntityMention> .\n
            <https://cue.qaecy.com/r/3715f1eb-bfa6-44b7-99ee-932f25f65d68> <https://dev.qaecy.com/ont#value> \"John Doe\" .\n
            <https://cue.qaecy.com/r/3715f1eb-bfa6-44b7-99ee-932f25f65d68> <https://dev.qaecy.com/ont#hasEntityCategory> <https://dev.qaecy.com/enum#Person> ."
      
  securitySchemes:
    QAECYAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        🔒 Retrieve the token from `/v1/accounts:signInWithPassword`.
        
        **Example Request**:
        ```
        curl -X POST "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=API_KEY" \
          -H "Content-Type: application/json" \
          -d '{"email":"user@example.com","password":"password","returnSecureToken":true}'
        ```
        **Dev mode**
        Use http://localhost:9099/identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=API_KEY